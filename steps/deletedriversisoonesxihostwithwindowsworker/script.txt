$DIR="C:\attuneautomationworker"

Set-Location "${DIR}"
if ( -Not (Test-Path "drivers_{newVmNode.fqn}.iso" `
    -PathType Leaf) ) {
    Write-Host "This build doesn't have a ${DIR}\drivers_{newVmNode.fqn}.iso."
} else {
    $ErrorActionPreference = "Stop"
    Import-Module VMware.VimAutomation.Core
    
    Connect-VIServer {vmwareVcenterNode.ip} `
        -User "{vmwareVcenterUser.user}" `
        -Password '{vmwareVcenterUser.password}'
    
    if ($? -eq $false) {
        Write-Host "Error: Not connected."
        exit 1
    }

    # Get the Datastore
    $datastore = Get-Datastore -Name '{vmStoragePoolName}'
    $datastore

    # Create the DS drive
    if (Test-Path "ds:") {
        Remove-PSDrive ds -Force
    }

    if ($datastore -is [System.Array]) {
        Write-Host "Get-Datastore returned multiple datastores, using first item in array.."
        $datastore = $datastore[0]
    }

    New-PSDrive -Location $datastore -Name ds -PSProvider VimDatastore -Root ""

    $vmwareBootIsoDirectory = "/kickstart_isos"
    
    # Ensure the destination dir exists
    $KICKSTART_ISOS_DIR="ds:$vmwareBootIsoDirectory/"
    $KICKSTART_ISOS_DIR = $KICKSTART_ISOS_DIR -Replace "/","\"
    Write-Host "KICKSTART_ISOS_DIR=$KICKSTART_ISOS_DIR"
    Set-Location "$KICKSTART_ISOS_DIR"

    # Create the ISO_TO_DELETE string
    $ISO_TO_DELETE = "drivers_{newVmNode.fqn}.iso"
    Write-Host "ISO_TO_DELETE = $ISO_TO_DELETE"

    Get-Location

    if (Test-Path $ISO_TO_DELETE) {
        Remove-iTem "$ISO_TO_DELETE"

        if (Test-Path $ISO_TO_DELETE) {
            Write-Host "$ISO_TO_DELETE deletion failed"
            exit 1
        } else {
            Write-host "$ISO_TO_DELETE deletion successful"
        }

    } else {
        Write-host "$ISO_TO_DELETE already deleted, ok."
    }

    # Remove the DS Drive
    Remove-PSDrive ds -Force

}