cd "{automationWorkerLinuxBaseDirectory}"
if [ ! -f drivers_{newVmNode.fqn}.iso ]
then
    echo "This build doesn't have a {automationWorkerLinuxBaseDirectory}/drivers_{newVmNode.fqn}.iso."
else


    pwsh -NonInteractive -NoProfile -Command - <<'EOF'
    Set-StrictMode -Version Latest
    $ErrorActionPreference = "Stop"

    Import-Module VMware.VimAutomation.Core
    
    Connect-VIServer {vmwareVcenterNode.ip} `
        -User {vmwareVcenterUser.user} `
        -Password {vmwareVcenterUser.password}
        
    if ($? -eq $false) {
        Write-Host "Error: Not connected."
        exit 1
    }
    
    $vmwareBootIsoDirectory = "/kickstart_isos"

    # Create the TO dir string
    $to = "ds:$vmwareBootIsoDirectory"
    $to = $to -Replace "/","\"
    
    # Get the Datastore
    $datastore = Get-Datastore -Name '{vmStoragePoolName}'
    $datastore
    
    # Create the DS drive
    if (Test-Path "ds:") {
        Remove-PSDrive ds -Force
    }
    
    if ($datastore -is [System.Array]) {
        Write-Host "Get-Datastore returned multiple datastores, using first item in array.."
        $datastore = $datastore[0]
    
    }
    
    New-PSDrive -Location $datastore -Name ds -PSProvider VimDatastore -Root ""
    
    # Ensure the destination dir exists
    Set-Location "ds:"
    
    if (-Not (Test-Path "$to")) {
        "Creating $to"
        New-Item  -ItemType Directory -Path "$to"
    }
    
    # Set the local path to the ISO
    Set-Location {automationWorkerLinuxBaseDirectory}
    
    # Copy the ISO
    Copy-DatastoreItem drivers_{newVmNode.fqn}.iso $to `
        -Force:$true -Confirm:$false 
    
        
    # Remove the DS Drive
    Remove-PSDrive ds -Force
    
EOF
    
fi