if (${{virtualMachineBootLoaderIsBios}}) {

  $ErrorActionPreference = "Stop"
  Import-Module VMware.VimAutomation.Core

  Connect-VIServer {vmwareVcenterNode.ip} `
      -User {vmwareVcenterUser.user} `
      -Password {vmwareVcenterUser.password}

  if ($? -eq $false) {
      Write-Host "Error: Not connected."
      exit 1
  }

  $vm = Get-VM -Name "{newVmNode.fqn}"

  # the device name of the hard disk to which to boot
  $strBootHDiskDeviceName = "Hard disk 1"

  # get the VirtualDisk device, then grab its Key (DeviceKey, used later)
  $intHDiskDeviceKey = ($vm.ExtensionData.Config.Hardware.Device | ?{$_.DeviceInfo.Label -eq $strBootHDiskDeviceName}).Key

  # bootable Disk BootOption device, for use in setting BootOrder (the corresponding VirtualDisk device is bootable, assumed)
  $oBootableHDisk = New-Object -TypeName VMware.Vim.VirtualMachineBootOptionsBootableDiskDevice -Property @{"DeviceKey" = $intHDiskDeviceKey}

  # bootable CDROM device (per the docs, the first CDROM with bootable media found is used)
  $oBootableCDRom = New-Object -Type VMware.Vim.VirtualMachineBootOptionsBootableCdromDevice

  $spec = New-Object VMware.Vim.VirtualMachineConfigSpec -Property @{
      "BootOptions" = New-Object VMware.Vim.VirtualMachineBootOptions -Property @{
          BootOrder = $oBootableHDisk, $oBootableCDRom
      } # end new-object
  } # end new-object

  # reconfig the VM to use the spec with the new BootOrder
  $vm.ExtensionData.ReconfigVM_Task($spec)

} else {
    echo "Skipping for UEFI boot."
}
